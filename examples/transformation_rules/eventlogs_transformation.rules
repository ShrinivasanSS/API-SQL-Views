import hashlib
import json
from datetime import datetime

entity_type = INPUT_PARAMS.get("entity_type", "")
entity_id = INPUT_PARAMS.get("entity_id")
entity_name = INPUT_PARAMS.get("entity_name", "")
default_event_type = INPUT_PARAMS.get("event_type", "")
event_source = INPUT_PARAMS.get("event_source", "") or INPUT_PARAMS.get(
    "blueprint_table_type", ""
)


def _normalise_time(raw_value: object) -> str | None:
    """Normalise event timestamps to ISO8601 strings when possible."""

    if raw_value is None:
        return None

    if isinstance(raw_value, (int, float)):
        ts = pd.to_datetime(raw_value, unit="ms", errors="coerce")
        if pd.isna(ts):
            return str(raw_value)
        return ts.tz_localize("UTC").isoformat()

    if isinstance(raw_value, str):
        for fmt in ("%d-%m-%Y %H:%M:%S:%f", "%d-%m-%Y %H:%M:%S"):
            try:
                return datetime.strptime(raw_value, fmt).isoformat()
            except ValueError:
                continue
        return raw_value

    return str(raw_value)


def _load_payload(raw: object) -> dict:
    if isinstance(raw, dict):
        return raw
    if isinstance(raw, str) and raw:
        try:
            return json.loads(raw)
        except json.JSONDecodeError:
            return {}
    return {}


rows = []
for _, row in df_input.iterrows():
    payload = _load_payload(row.get("Raw"))
    message = row.get("Message") or payload.get("message", "")
    severity = row.get("Severity") or payload.get("severity")
    source = row.get("Source") or payload.get("source") or event_source
    monitor_id = row.get("MonitorId") or payload.get("monitorid") or entity_id
    event_type = row.get("EventType") or payload.get("eventtype") or default_event_type

    event_time_raw = (
        row.get("ReceivedTime")
        or row.get("Timestamp")
        or payload.get("_zlf__zl_received_time")
        or payload.get("_zl_received_time")
        or payload.get("_zl_timestamp")
    )
    iso_event_time = _normalise_time(event_time_raw)

    raw_json = row.get("Raw")
    if not isinstance(raw_json, str):
        raw_json = json.dumps(payload, separators=(",", ":"), ensure_ascii=False)

    unique_id = (
        payload.get("_zl_unique_id")
        or payload.get("_zlf_eventid")
        or payload.get("_zl_id")
    )
    if not unique_id:
        fallback = f"{monitor_id}|{event_time_raw}|{message}"
        unique_id = hashlib.sha1(fallback.encode("utf-8", errors="ignore")).hexdigest()

    rows.append(
        {
            "EntityType": entity_type,
            "EntityID": monitor_id or entity_id,
            "EntityName": entity_name,
            "EventType": event_type,
            "EventTime": iso_event_time,
            "Severity": severity,
            "Source": source,
            "Message": message,
            "EventId": str(unique_id),
            "Raw": raw_json,
        }
    )

columns = [
    "EntityType",
    "EntityID",
    "EntityName",
    "EventType",
    "EventTime",
    "Severity",
    "Source",
    "Message",
    "EventId",
    "Raw",
]

df_output = pd.DataFrame(rows, columns=columns)

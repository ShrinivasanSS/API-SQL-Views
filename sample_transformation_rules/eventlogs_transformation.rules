import hashlib
import json
from datetime import datetime

# ------------------------------------------------------------------
# 1️⃣ Load the nested JSON from df_input (one row)
json_data = df_input.iloc[0].to_dict()

entity_type = INPUT_PARAMS.get("entity_type", "")
entity_id = INPUT_PARAMS.get("entity_id")
entity_name = INPUT_PARAMS.get("entity_name", "")
default_event_type = INPUT_PARAMS.get("event_type", "")
event_source = INPUT_PARAMS.get("event_source", "") or INPUT_PARAMS.get(
    "blueprint_source_type", ""
)


def _normalise_time(raw_value: object) -> str | None:
    """Normalise event timestamps to ISO8601 strings when possible."""

    if raw_value is None:
        return None

    if isinstance(raw_value, (int, float)):
        ts = pd.to_datetime(raw_value, unit="ms", errors="coerce")
        if pd.isna(ts):
            return str(raw_value)
        return ts.tz_localize("UTC").isoformat()

    if isinstance(raw_value, str):
        for fmt in ("%d-%m-%Y %H:%M:%S:%f", "%d-%m-%Y %H:%M:%S"):
            try:
                return datetime.strptime(raw_value, fmt).isoformat()
            except ValueError:
                continue
        return raw_value

    return str(raw_value)


def _derive_event_id(doc: dict, fallback: str) -> str:
    event_id = doc.get("_zl_unique_id") or doc.get("_zlf_eventid")
    if event_id:
        return str(event_id)

    payload = fallback.encode("utf-8", errors="ignore")
    return hashlib.sha1(payload).hexdigest()


rows = []

for doc in json_data.get("data", {}).get("docs", []):
    message = doc.get("message", "")
    event_time_raw = (
        doc.get("_zlf__zl_received_time")
        or doc.get("_zl_received_time")
        or doc.get("_zl_timestamp")
    )
    iso_event_time = _normalise_time(event_time_raw)

    raw_payload = json.dumps(doc, separators=(",", ":"), ensure_ascii=False)
    fallback_key = f"{entity_id}|{event_time_raw}|{message}"
    event_id_value = _derive_event_id(doc, fallback_key)

    rows.append(
        {
            "EntityType": entity_type,
            "EntityID": entity_id,
            "EntityName": entity_name,
            "EventType": doc.get("eventtype") or default_event_type,
            "EventTime": iso_event_time,
            "Severity": doc.get("severity"),
            "Source": doc.get("source") or event_source,
            "Message": message,
            "EventId": event_id_value,
            "Raw": raw_payload,
        }
    )

df_output = pd.DataFrame(
    rows,
    columns=[
        "EntityType",
        "EntityID",
        "EntityName",
        "EventType",
        "EventTime",
        "Severity",
        "Source",
        "Message",
        "EventId",
        "Raw",
    ],
)
